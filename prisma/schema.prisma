generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STR")
}

model Booking {
  booking_id   Int          @id @default(autoincrement())
  booking_ref  String       @unique
  booking_name String?
  account_id   Int?
  email        String
  phone        String
  update_ts    DateTime?    @db.Timestamptz(6)
  price        Decimal?     @db.Decimal(7, 2)
  account      Account?     @relation(fields: [account_id], references: [account_id], map: "booking_account_id_fk")
  booking_leg  BookingLeg[]
  passenger    Passenger[]

  @@map("booking")
}

model Flight {
  flight_id           Int          @id @default(autoincrement())
  flight_no           String
  scheduled_departure DateTime     @db.Timestamptz(6)
  scheduled_arrival   DateTime     @db.Timestamptz(6)
  departure_airport   String       @db.Char(3)
  arrival_airport     String       @db.Char(3)
  status              String
  aircraft_code       String       @db.Char(3)
  actual_departure    DateTime?    @db.Timestamptz(6)
  actual_arrival      DateTime?    @db.Timestamptz(6)
  update_ts           DateTime?    @db.Timestamptz(6)
  aircraft            Aircraft     @relation(fields: [aircraft_code], references: [code], map: "aircraft_code_fk")
  airport             Airport      @relation(fields: [departure_airport], references: [airport_code], map: "arrival_airport_fk")
  booking_leg         BookingLeg[]

  @@map("flight")
}

model FrequentFlyer {
  frequent_flyer_id Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  title             String
  card_num          String
  level             Int
  award_points      Int
  email             String
  phone             String
  update_ts         DateTime? @db.Timestamptz(6)
  account           Account[]

  @@map("frequent_flyer")
}

model Account {
  account_id        Int            @id @default(autoincrement())
  login             String
  first_name        String
  last_name         String
  frequent_flyer_id Int?
  update_ts         DateTime?      @db.Timestamptz(6)
  frequent_flyer    FrequentFlyer? @relation(fields: [frequent_flyer_id], references: [frequent_flyer_id], map: "frequent_flyer_id_fk")
  booking           Booking[]
  passenger         Passenger[]
  phone             Phone[]

  @@map("account")
}

model Aircraft {
  model    String?
  range    Decimal  @db.Decimal
  class    Int
  velocity Decimal  @db.Decimal
  code     String   @id
  flight   Flight[]

  @@map("aircraft")
}

model Airport {
  airport_code String    @id @db.Char(3)
  airport_name String
  city         String
  airport_tz   String
  continent    String?
  iso_country  String?
  iso_region   String?
  intnl        Boolean
  update_ts    DateTime? @db.Timestamptz(6)
  flight       Flight[]

  @@map("airport")
}

model Phone {
  phone_id      Int       @id @default(autoincrement())
  account_id    Int?
  phone         String?
  phone_type    String?
  primary_phone Boolean?
  update_ts     DateTime? @db.Timestamptz(6)
  account       Account?  @relation(fields: [account_id], references: [account_id], map: "phone_account_id_fk")

  @@map("phone")
}

model BookingLeg {
  booking_leg_id Int            @id @default(autoincrement())
  booking_id     Int
  flight_id      Int
  leg_num        Int?
  is_returning   Boolean?
  update_ts      DateTime?      @db.Timestamptz(6)
  booking        Booking        @relation(fields: [booking_id], references: [booking_id], map: "booking_id_fk")
  flight         Flight         @relation(fields: [flight_id], references: [flight_id], map: "flight_id_fk")
  boarding_pass  BoardingPass[]

  @@map("booking_leg")
}

model BoardingPass {
  pass_id        Int         @id @default(autoincrement())
  passenger_id   Int?
  booking_leg_id Int?
  seat           String?
  boarding_time  DateTime?   @db.Timestamptz(6)
  precheck       Boolean?
  update_ts      DateTime?   @db.Timestamptz(6)
  booking_leg    BookingLeg? @relation(fields: [booking_leg_id], references: [booking_leg_id], map: "booking_leg_id_fk")
  passenger      Passenger?  @relation(fields: [passenger_id], references: [passenger_id], map: "passenger_id_fk")

  @@map("borading_pass")
}

model Passenger {
  passenger_id  Int            @id @default(autoincrement())
  booking_id    Int
  booking_ref   String?
  passenger_no  Int?
  first_name    String
  last_name     String
  account_id    Int?
  update_ts     DateTime?      @db.Timestamptz(6)
  age           Int?
  account       Account?       @relation(fields: [account_id], references: [account_id], map: "pass_account_id_fk")
  booking       Booking        @relation(fields: [booking_id], references: [booking_id], map: "pass_booking_id_fk")
  boarding_pass BoardingPass[]

  @@map("passenger")
}
